openapi: 3.0.0
info:
  version: 1.0.0
  title: Help Desk API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: '"Help Desk" is a comprehensive customer support application designed to streamline and optimize customer service operations. With intuitive ticket management, efficient communication tools, and a robust knowledge base, Help Desk empowers organizations to provide prompt assistance and resolution to customer inquiries and issues. From ticket submission to resolution, Help Desk ensures a seamless support experience, enhancing customer satisfaction and loyalty.'
  contact:
    name: Pixfar Development Team
    url: https://pixfar.com
    email: anamul@pixfar.com
servers:
  - description: Local Development
    url: http://127.0.0.1:5000
  - description: Mock Server
    url: http://127.0.0.1:5055/_mock/openapi
tags:
  - name: Auth
    description: Authentication endpoints (public)
  - name: Category
    description: Category endpoints (private)
  - name: System
    description: System endpoints (private)
  - name: Team
    description: Team endpoints (private)
  - name: Ticket
    description: Ticket endpoints (private)
  - name: User
    description: User endpoints (private)
paths:
  /api/v1/auth/signup:
    post:
      description: Sign up a new user to the application
      operationId: userSignup
      summary: Sign as a new user
      tags:
        - Auth
      security: []
      requestBody:
        $ref: '#/components/requestBodies/signup'
      responses:
        '200':
          $ref: '#/components/responses/signup-success'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/login:
    post:
      description: Login to the application using email and password
      operationId: login
      summary: Login
      security: []
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          $ref: '#/components/responses/login-success'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/forgot-password:
    post:
      description: route for reseting password if any user forgot password to login
      summary: forgot password
      operationId: forgot-password
      security: []
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/forgot-password'
      responses:
        '200':
          $ref: '#/components/responses/forgot-password'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/reset-password:
    post:
      description: this api url is used to reset the login credentials if any one forgot the login credentials
      summary: reset password
      operationId: reset-password
      security: []
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/reset-password'
      responses:
        '200':
          $ref: '#/components/responses/reset-password'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/verify-token:
    post:
      description: This api endpoints used to verify the jwt token if it is valid or not
      summary: Verify JWT token
      operationId: verify-jwt-token
      tags:
        - Auth
      security: []
      requestBody:
        $ref: '#/components/requestBodies/verify-token'
      responses:
        '200':
          $ref: '#/components/responses/verify-token'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/change-password:
    patch:
      description: This api endpoints used to change password for login user
      summary: Change password for login user
      operationId: change-password
      security:
        - JWT: []
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/change-password'
      responses:
        '200':
          $ref: '#/components/responses/change-password'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/update-profile:
    patch:
      description: This api endpoints is used to update the logged in user's profile information
      summary: Update profile information
      operationId: update-profile
      tags:
        - Auth
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/update-profile'
      responses:
        '200':
          $ref: '#/components/responses/update-profile'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/me:
    get:
      description: This endpoints is used to get the logged in users information
      summary: Get Logged in user's information
      operationId: user-info
      tags:
        - Auth
      security:
        - JWT: []
      responses:
        '200':
          $ref: '#/components/responses/user-info'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/auth/delete-account:
    delete:
      description: This api endpoints used to delete logged in user's account
      summary: Delete user account
      operationId: delete-account
      tags:
        - Auth
      security:
        - JWT: []
      responses:
        '200':
          $ref: '#/components/responses/delete-profile'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/categories:
    post:
      description: This api endpoint is used to create a new category
      summary: create a new category
      operationId: create-category
      tags:
        - Category
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/create-category'
      responses:
        '201':
          $ref: '#/components/responses/create-category'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: This api endpoint is used to get all categories
      summary: get all categories
      operationId: get-all-categories
      tags:
        - Category
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/get-all-categories'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/categories/{id}:
    get:
      description: This api endpoint is used to get category by id
      summary: get category by id
      operationId: get-category-by-id
      tags:
        - Category
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/get-category-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      description: This api endpoint is used to update category by id
      summary: update category by id
      operationId: update-category-by-id
      tags:
        - Category
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/update-category'
      responses:
        '200':
          $ref: '#/components/responses/get-category-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: This api endpoint is used to delete category by id
      summary: delete category by id
      operationId: delete-category-by-id
      tags:
        - Category
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/delete-category-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/categories/{id}/tickets:
    get:
      description: This endpoint returns all tickets by category id
      summary: Get all tickets by category id
      operationId: get-tickets-by-category
      tags:
        - Category
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/get-tickets-by-category'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/systems:
    post:
      description: This endpoint creates a new system
      summary: Create a new system
      operationId: create-system
      tags:
        - System
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/create-system'
      responses:
        '201':
          $ref: '#/components/responses/create-system'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: This endpoint returns all systems
      summary: Get all systems
      operationId: get-systems
      tags:
        - System
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/get-systems'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/systems/{id}:
    get:
      description: This endpoint returns a system by id
      summary: Get a system by id
      operationId: get-system
      tags:
        - System
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/get-system-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      description: This endpoint updates a system by id
      summary: Update a system by id
      operationId: update-system
      tags:
        - System
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/update-system'
      responses:
        '200':
          $ref: '#/components/responses/update-system'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: This endpoint deletes a system by id
      summary: Delete a system by id
      operationId: delete-system
      tags:
        - System
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          $ref: '#/components/responses/delete-system'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/systems/{id}/tickets:
    get:
      description: This api endpoint returns all tickets by system
      summary: Get all tickets by system
      operationId: get-tickets-by-system
      tags:
        - System
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/get-tickets-by-system'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/teams:
    post:
      description: This api endpoint is used to create a new team
      summary: Create a new team
      operationId: create-team
      tags:
        - Team
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/create-team'
      responses:
        '201':
          $ref: '#/components/responses/create-team'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: This api endpoint returns all teams
      summary: Get all teams
      operationId: get-teams
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/get-teams'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/teams/{id}:
    get:
      description: This api endpoint return a team by id
      summary: Get a team by id
      operationId: get-team
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/team-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      description: This api endpoint is used to update a team by id
      summary: Update a team by id
      operationId: update-team
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/update-team'
      responses:
        '200':
          $ref: '#/components/responses/update-team'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: This api endpoint is used to delete a team by id
      summary: Delete a team by id
      operationId: delete-team
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/delete-team'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/teams/{id}/tickets:
    get:
      description: This endpoint returns all tickets by team id
      summary: Get all tickets by team id
      operationId: get-tickets-by-team
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/tickets-by-team'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/teams/{id}/members:
    post:
      description: This endpoint creates a new team member
      summary: Create a new team member
      operationId: create-team-member
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/create-team-member'
      responses:
        '200':
          $ref: '#/components/responses/members-by-team'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: This endpoint returns all members by team id
      summary: Get all members by team id
      operationId: get-members-by-team
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/members-by-team'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/teams/{id}/members/{member_id}:
    get:
      description: This endpoint returns a team member
      summary: Get a team member
      operationId: get-team-member
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/member-id'
      responses:
        '200':
          $ref: '#/components/responses/member-by-team'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: This endpoint deletes a team member
      summary: Delete a team member
      operationId: delete-team-member
      tags:
        - Team
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/member-id'
      responses:
        '200':
          $ref: '#/components/responses/delete-team-member'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/tickets:
    post:
      description: This endpoint allows you to create a new ticket
      summary: Create a new ticket
      operationId: create-ticket
      tags:
        - Ticket
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/create-ticket'
      responses:
        '201':
          $ref: '#/components/responses/create-ticket'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: This endpoint returns all tickets
      summary: Get all tickets
      operationId: get-tickets
      tags:
        - Ticket
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/get-tickets'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/tickets/{id}:
    get:
      description: This api endpoint returns a ticket by id
      summary: Get a ticket by id
      operationId: get-ticket
      tags:
        - Ticket
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ticket-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      description: This api endpoint updates a ticket by id
      summary: Update a ticket by id
      operationId: update-ticket
      tags:
        - Ticket
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/update-ticket'
      responses:
        '200':
          $ref: '#/components/responses/update-ticket'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: This api endpoint deletes a ticket by id
      summary: Delete a ticket by id
      operationId: delete-ticket
      tags:
        - Ticket
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/delete-ticket'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/tickets/assign-to-team:
    post:
      description: This endpoint allows you to assign a ticket to a team
      summary: Assign a ticket to a team
      operationId: assign-ticket-to-team
      tags:
        - Ticket
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/assign-to-team'
      responses:
        '200':
          $ref: '#/components/responses/assign-to-team'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/tickets/assign-to-user:
    post:
      description: This endpoint allows you to assign a ticket to a user
      summary: Assign a ticket to a user
      operationId: assign-ticket-to-user
      tags:
        - Ticket
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/assign-to-user'
      responses:
        '200':
          $ref: '#/components/responses/assign-to-user'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/users:
    get:
      description: This api endpoint returns all users
      summary: Get all users
      operationId: get-users
      tags:
        - User
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/order-by'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          $ref: '#/components/responses/get-users'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/users/{id}:
    get:
      description: This api endpoint returns a user by id
      summary: Get a user by id
      operationId: get-user-by-id
      tags:
        - User
      security:
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/user-by-id'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    page:
      in: query
      name: page
      required: false
      schema:
        type: integer
        example: 1
        default: 1
    limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        example: 1
        default: 1
    order:
      in: query
      name: order
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        example: asc
        default: asc
    order-by:
      in: query
      name: orderBy
      required: false
      schema:
        type: string
        example: createdAt
        default: createdAt
    fields:
      in: query
      name: fields
      required: false
      schema:
        type: string
        example: id,name,email
        default: createdAt,updatedAt
    search:
      in: query
      name: search
      required: false
      schema:
        type: string
        example: search
        default: search
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: cuid
        description: The unique identifier of the member.
        example: clvfmx5380001ngrve2rsnbv5
    member-id:
      in: path
      name: member_id
      required: true
      schema:
        type: string
        format: cuid
        description: The unique identifier of the member.
    orderBy:
      $ref: '#/components/parameters/order-by'
  schemas:
    signup:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phone:
          type: string
          example: '1234567890'
        address:
          type: string
          example: 1234 Main St
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: password
        confirmPassword:
          type: string
          example: password
      required:
        - email
        - password
        - confirmPassword
        - firstName
        - lastName
        - phone
        - address
    login:
      type: object
      properties:
        email:
          type: string
          format: email
          example: example@gmail.com
        password:
          type: string
          example: password
      required:
        - email
        - password
    forgot-password:
      type: object
      properties:
        email:
          type: string
          description: email which use to create the account
          example: example@gmail.com
      required:
        - email
    reset-password:
      type: object
      properties:
        token:
          type: string
          example: token
        email:
          type: string
          format: email
          example: example@gmail.com
        password:
          type: string
          example: password
        confirmPassword:
          type: string
          example: password
      required:
        - token
        - email
        - password
        - confirmPassword
    verify-token:
      type: object
      properties:
        token:
          type: string
          example: token
      required:
        - token
    change-password:
      type: object
      properties:
        currentPassword:
          type: string
          example: '12345678'
        newPassword:
          type: string
          example: '12345678'
        confirmPassword:
          type: string
          example: '12345678'
      required:
        - currentPassword
        - newPassword
        - confirmPassword
    update-user:
      type: object
      properties:
        firstName:
          type: string
          example: Anamul
        lastName:
          type: string
          example: Islam
        phone:
          type: string
          example: '01700000000'
        address:
          type: string
          example: Dhaka, Bangladesh
        avatar:
          type: string
          example: https://example.com/avatar.jpg
    user:
      type: object
      properties:
        firstName:
          type: string
          example: Jon
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: example@gmail.com
    category:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
          example: Category name
        description:
          type: string
          example: Category description
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
    create-category:
      type: object
      properties:
        name:
          type: string
          example: Category name
        description:
          type: string
          example: Category description
      required:
        - name
    update-category:
      type: object
      properties:
        name:
          type: string
          example: Category 1
        description:
          type: string
          example: Category 1 description
    ticket:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: title
        content:
          type: string
          example: content
        system:
          type: string
          example: low
        category:
          type: string
          example: assignee
        submitter:
          type: string
          example: systemId
        assignedTeam:
          type: string
          example: reporter
        assignedUser:
          type: string
          example: '2021-01-01'
        status:
          type: string
          example: open
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
      required:
        - title
        - content
        - system
        - category
        - submitter
        - status
    system:
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: The unique identifier of the system
        name:
          type: string
          description: The name of the system
        description:
          type: string
          description: The description of the system
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: The status of the system
        createdAt:
          type: string
          format: date-time
          description: The date and time the system was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time the system was last updated
        url:
          type: string
          format: uri
          description: The URL of the system
          example: https://example.com
        owner:
          type: string
          description: The owner of the system
          example: John Doe
    create-system:
      type: object
      properties:
        name:
          type: string
          example: System Name
        description:
          type: string
          example: System Description
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: The status of the system
          example: ACTIVE
        url:
          type: string
          example: https://example.com
        owner:
          type: string
          example: John Doe
      required:
        - name
        - description
        - url
        - logo
        - owner
    update-system:
      type: object
      properties:
        name:
          type: string
          example: System Name
        description:
          type: string
          example: System Description
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: The status of the system
          example: ACTIVE
        url:
          type: string
          example: https://example.com
        owner:
          type: string
          example: John Doe
    team:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: team 1
        description:
          type: string
          example: team 1 description
        createdAt:
          type: string
          example: '2021-09-01T00:00:00.000Z'
        updatedAt:
          type: string
          example: '2021-09-01T00:00:00.000Z'
    create-team:
      type: object
      properties:
        name:
          type: string
          example: team 1
        description:
          type: string
          example: team 1 description
      required:
        - name
        - description
    update-team:
      type: object
      properties:
        name:
          type: string
          example: team 1
        description:
          type: string
          example: team description
    member:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: team 1
        teamId:
          type: string
          example: team-1
        userId:
          type: integer
          example: 1
    create-team-member:
      type: object
      properties:
        name:
          type: string
          example: Team Member Name
        email:
          type: string
          format: email
          example: example@gmail.com
        userId:
          type: string
          example: ckj1vz4vq0000z1l8z7z7z7z7
          description: The unique identifier of the user
        isLeader:
          type: boolean
          example: false
          default: false
      required:
        - name
        - email
        - teamId
        - userId
    create-ticket:
      type: object
      properties:
        title:
          type: string
          example: title
        content:
          type: string
          example: content
        system:
          type: string
          example: low
        category:
          type: string
          example: assignee
        submitter:
          type: string
          example: systemId
        assignedTeam:
          type: string
          example: reporter
        assignedUser:
          type: string
          example: '2021-01-01'
        status:
          type: string
          example: open
      required:
        - title
        - content
        - system
        - category
        - submitter
        - status
    update-ticket:
      type: object
      properties:
        title:
          type: string
          example: title
        content:
          type: string
          example: content
        system:
          type: string
          example: low
        category:
          type: string
          example: assignee
        submitter:
          type: string
          example: systemId
        assignedTeam:
          type: string
          example: reporter
        assignedUser:
          type: string
          example: '2021-01-01'
        status:
          type: string
          example: open
    assign-to-team:
      type: object
      properties:
        ticketId:
          type: string
          format: cuid,
          example: ckjv4v7xv0000l1l5z7z7z7z7
        teamId:
          type: string
          format: cuid,
          example: ckjv4v7xv0000l1l5z7z7z7z7
    assign-to-user:
      type: object
      properties:
        ticketId:
          type: string
          format: cuid,
          example: ckjv4v7xv0000l1l5z7z7z7z7
        userId:
          type: string
          format: cuid,
          example: ckjv4v7xv0000l1l5z7z7z7z7
  responses:
    '400':
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              status:
                type: string
                example: error
              message:
                type: string
                example: Bad request
              errors:
                type: object
                properties:
                  field:
                    type: string
                    example: message
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              status:
                type: string
                example: error
              message:
                type: string
                example: Unauthorized
    '403':
      description: forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 403
              status:
                type: string
                example: error
              message:
                type: string
                example: Forbidden
    '404':
      description: not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              status:
                type: string
                example: error
              message:
                type: string
                example: Not found
    '500':
      description: internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              status:
                type: string
                example: error
              message:
                type: string
                example: Internal server error
    signup-success:
      description: signup successful
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Signup successful
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1MTYyMzkwMjJ9
    login-success:
      description: login successful
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: login successful
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1MTYyMzkwMjJ9
    forgot-password:
      description: reset email send successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Reset password email send to successfully
    reset-password:
      description: success responses for reset password request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: password reset successful. Please login again.
    verify-token:
      description: Success response for valid token after verify the token
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: token is valid
    change-password:
      description: response body for successfully change password
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: password changed successfully
    update-profile:
      description: Success response for updating user's profile information
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Profile updated successfully
              data:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/user'
    user-info:
      description: logged in user's information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    delete-profile:
      description: Success response if logged in user's account is deleted
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: account deleted successfully
    get-all-categories:
      description: Response body for getting all categories
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: categories fetched successfully
              data:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
    create-category:
      description: Response body for successfully creating a new category
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 201
              status:
                type: string
                example: success
              message:
                type: string
                example: category created successfully
              data:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/category'
    get-category-by-id:
      description: Response body for getting a category by id
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: category fetched successfully
              data:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/category'
    delete-category-by-id:
      description: Response body for deleting a category by ID
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: category deleted successfully
    get-tickets-by-category:
      description: Response body for getting tickets by category
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: tickets fetched successfully
              data:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/ticket'
    get-systems:
      description: Response body for getting all systems
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Systems retrieved successfully
              data:
                type: object
                properties:
                  systems:
                    type: array
                    items:
                      $ref: '#/components/schemas/system'
    create-system:
      description: Response body for creating a system
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 201
              status:
                type: string
                example: success
              message:
                type: string
                example: System created successfully
              data:
                type: object
                properties:
                  system:
                    $ref: '#/components/schemas/system'
    get-system-by-id:
      description: This api endpoints returns the system by id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/system'
    delete-system:
      description: Response body for deleting a system
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 204
              status:
                type: string
                example: success
              message:
                type: string
                example: System deleted successfully
    update-system:
      description: Response body for updating a system
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: System updated successfully
              data:
                type: object
                properties:
                  system:
                    $ref: '#/components/schemas/system'
    get-tickets-by-system:
      description: Response body for getting tickets by system
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: tickets fetched successfully
              data:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/ticket'
    get-teams:
      description: Response body for getting all teams
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Teams retrieved successfully
              data:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: '#/components/schemas/team'
    create-team:
      description: Response body for creating a team
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 201
              status:
                type: string
                example: success
              message:
                type: string
                example: Team created successfully
              data:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/team'
    team-by-id:
      description: Response body for getting a team by ID
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: team fetched successfully
              data:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/team'
    delete-team:
      description: Response body for deleting a team
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: team deleted successfully
    update-team:
      description: Response body for updated team
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: team updated successfully
              data:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/team'
    tickets-by-team:
      description: Response body for getting tickets by team ID
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: tickets fetched successfully
              data:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/ticket'
    members-by-team:
      description: Response body for getting members by team
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success message
              data:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/member'
    member-by-team:
      description: Response body for getting members by team
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success message
              data:
                type: object
                properties:
                  member:
                    $ref: '#/components/schemas/member'
    delete-team-member:
      description: Response body for deleting a team member
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success message
    get-tickets:
      description: Response body for getting all tickets
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Tickets retrieved successfully
              data:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/ticket'
    create-ticket:
      description: Response body for creating a new ticket
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 201
              status:
                type: string
                example: success
              message:
                type: string
                example: Ticket created successfully
              data:
                type: object
                properties:
                  ticket:
                    $ref: '#/components/schemas/ticket'
    ticket-by-id:
      description: Request body for getting a ticket by ID
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Ticket retrieved successfully
              data:
                $ref: '#/components/schemas/ticket'
    delete-ticket:
      description: Response body for deleting a ticket
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Ticket deleted successfully
    update-ticket:
      description: Response body for updating a ticket
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Ticket updated successfully
              data:
                type: object
                properties:
                  ticket:
                    $ref: '#/components/schemas/ticket'
    assign-to-team:
      description: Response body for assigning a ticket to a team
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Ticket assigned to team successfully
    assign-to-user:
      description: Response body for assigning a ticket to a user
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Ticket assigned to user successfully
    get-users:
      description: Request body for getting all users
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Users retrieved successfully
              data:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
    user-by-id:
      description: success responses for user by id request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: User found
              data:
                $ref: '#/components/schemas/user'
    signup:
      $ref: '#/components/responses/signup-success'
  requestBodies:
    signup:
      description: request body for sign up
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/signup'
    forgot-password:
      description: forgot password request body
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forgot-password'
    reset-password:
      description: request body for reset the login credentials
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reset-password'
    verify-token:
      description: request body for verify jwt token
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/verify-token'
    change-password:
      description: request body for change password
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/change-password'
    update-profile:
      description: Request body for update the logged in user's information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update-user'
    create-category:
      description: Request body for creating a new category
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create-category'
    update-category:
      description: Request body for updating a category
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update-category'
    create-system:
      description: Request body for creating a system
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create-system'
    update-system:
      description: Request body for updating a system
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update-system'
    create-team:
      description: Request body for creating a new team
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create-team'
    update-team:
      description: Request body for updating a team
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update-team'
    create-team-member:
      description: Request body for creating a new team member
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create-team-member'
    create-ticket:
      description: Request body for creating a new ticket
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create-ticket'
    update-ticket:
      description: Request body for updating a ticket
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update-ticket'
    assign-to-team:
      description: Request body for assigning a ticket to a team
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/assign-to-team'
    assign-to-user:
      description: Request body for assigning a ticket to a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/assign-to-user'
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
