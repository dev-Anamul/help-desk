version: "3.8"

services:
  # api-gateway service
  gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - SERVICE_NAME=gateway-service
    volumes:
      - ./api-gateway:/app
    networks:
      - app-network

  # user service
  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    # ports:
    #   - "5001:5001"
    environment:
      - PORT=5001
      - SERVICE_NAME=user-service
      - LOGGER_SERVICE_URL=http://logger:5007
    volumes:
      - ./services/user:/app
    networks:
      - app-network

  # auth service
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    # ports:
    #   - "5008:5008"
    environment:
      - PORT=5008
      - SERVICE_NAME=auth-service
      - USER_SERVICE_URL=http://user:5001
      - LOGGER_SERVICE_URL=http://logger:5007
    volumes:
      - ./services/auth:/app
    networks:
      - app-network

  # ticket service
  ticket:
    build:
      context: ./services/ticket
      dockerfile: Dockerfile
    # ports:
    #   - "5002:5002"
    environment:
      - PORT=5002
      - SERVICE_NAME=ticket-service
    volumes:
      - ./services/ticket:/app
    networks:
      - app-network

  # team service
  team:
    build:
      context: ./services/team
      dockerfile: Dockerfile
    # ports:
    #   - "5003:5003"
    environment:
      - PORT=5003
      - SERVICE_NAME=team-service
    volumes:
      - ./services/team:/app
    networks:
      - app-network

  # system service
  system:
    build:
      context: ./services/system
      dockerfile: Dockerfile
    # ports:
    #   - "5004:5004"
    environment:
      - PORT=5004
      - SERVICE_NAME=system-service
    volumes:
      - ./services/system:/app
    networks:
      - app-network

  # notification service
  notification:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    # ports:
    #   - "5005:5005"
    environment:
      - PORT=5005
      - SERVICE_NAME=notification-service
    volumes:
      - ./services/notification:/app
    networks:
      - app-network

  # category service
  category:
    build:
      context: ./services/category
      dockerfile: Dockerfile
    # ports:
    #   - "5006:5006"
    environment:
      - PORT=5006
      - SERVICE_NAME=category-service
    volumes:
      - ./services/category:/app
    networks:
      - app-network

  # logger service
  logger:
    build:
      context: ./services/logger
      dockerfile: Dockerfile
    environment:
      - PORT=5007
      - SERVICE_NAME=logger-service
    volumes:
      - ./services/logger:/app
    networks:
      - app-network

  # rabbitmq service
  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network

  # mongo service
  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # postgres service
  postgres:
    image: postgres:latest
    # ports:
    #   - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # pgadmin service
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "example@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "example"
    networks:
      - app-network

  # mongo service
  mongo:
    image: mongo:latest
    # ports:
    #   - "27020:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # mongo-express service
  mongo-express:
    image: mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: "mongo"
      ME_CONFIG_MONGODB_PORT: "27017"
      ME_CONFIG_BASICAUTH_USERNAME: "root"
      ME_CONFIG_BASICAUTH_PASSWORD: "root"
    networks:
      - app-network

  # mailhog service
  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    volumes:
      - mailhog-data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq-data:
  redis-data:
  mailhog-data:
  mongo-data:
  postgres-data:
