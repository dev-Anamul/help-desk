version: '3.8'

services:
  # api-gateway service
  gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    environment:
      PORT: 5000
      SERVICE_NAME: gateway-service
      AUTH_SERVICE_URL: http://auth:5008
      MONGO_URL: mongodb://mongo:27017
    volumes:
      - ./api-gateway:/app
    depends_on:
      - auth
      - user
      - ticket
      - team
      - system
      - category
      - notification
    networks:
      - app-network

  # user service
  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    ports:
      - '5001:5001'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PORT: 5001
      SERVICE_NAME: user-service
      LOGGER_SERVICE_URL: http://logger:5007
      DB_URL: postgres://postgres:postgres@postgres:5432/user?schema=public
      RABBIT_MQ_URL: amqp://rabbitmq
      REDIS_URL: redis://redis:6379
    volumes:
      - ./services/user/src:/app/src
    networks:
      - app-network

  # auth service
  auth:
    # build:
    #   context: ./services/auth
    #   dockerfile: Dockerfile
    image: help-auth
    ports:
      - '5008:5008'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PORT: 5008
      SERVICE_NAME: auth-service
      USER_SERVICE_URL: http://user:5001
      LOGGER_SERVICE_URL: http://logger:5007
      NOTIFICATION_SERVICE_URL: http://notification:5005
      DB_URL: postgres://postgres:postgres@postgres:5432/auth?schema=public
      RABBIT_MQ_URL: amqp://rabbitmq
      JWT_SECRET: 322cf05d853b3fc827b0a43ad98c72d7e1704f71599d87983ce74bf02a26ecfd
      JWT_EXPIRES_IN: 1d
    volumes:
      - ./services/auth/src:/app/src
    networks:
      - app-network

  # ticket service
  ticket:
    build:
      context: ./services/ticket
      dockerfile: Dockerfile
    ports:
      - '5002:5002'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PORT: 5002
      SERVICE_NAME: ticket-service
      USER_SERVICE_URL: http://user:5001
      TEAM_SERVICE_URL: http://team:5003
      RABBIT_MQ_URL: amqp://rabbitmq
      REDIS_URL: redis://redis:6379
      DB_URL: postgres://postgres:postgres@postgres:5432/ticket?schema=public
    volumes:
      - ./services/ticket/src:/app/src
    networks:
      - app-network

  # team service
  team:
    build:
      context: ./services/team
      dockerfile: Dockerfile
    ports:
      - '5003:5003'
    environment:
      PORT: 5003
      SERVICE_NAME: team-service
      TICKET_SERVICE_URL: http://ticket:5002
      USER_SERVICE_URL: http://user:5001
      DB_URL: postgres://postgres:postgres@postgres:5432/team?schema=public
      RABBIT_MQ_URL: amqp://rabbitmq
      REDIS_URL: redis://redis:6379
    volumes:
      - ./services/team/src:/app/src
    networks:
      - app-network

  # system service
  system:
    build:
      context: ./services/system
      dockerfile: Dockerfile
    ports:
      - '5004:5004'
    environment:
      PORT: 5004
      SERVICE_NAME: system-service
      DB_URL: postgres://postgres:postgres@postgres:5432/system?schema=public
      RABBIT_MQ_URL: amqp://rabbitmq
      TICKET_SERVICE_URL: http://ticket:5002
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./services/system/src:/app/src
    networks:
      - app-network

  # notification service
  notification:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - '5005:5005'
    environment:
      PORT: 5005
      SERVICE_NAME: notification-service
      RABBIT_MQ_URL: amqp://rabbitmq
      EMAIL_HOST: mailhog
      EMAIL_PORT: 1025
      EMAIL_USERNAME: anamuljibon.abc.123@gmail.com
      EMAIL_PASSWORD: wnrofhjypsjupjuo
    volumes:
      - ./services/notification:/app
    networks:
      - app-network

  # category service
  category:
    build:
      context: ./services/category
      dockerfile: Dockerfile
    ports:
      - '5006:5006'
    depends_on:
      - postgres
      - rabbitmq
      - redis
    environment:
      PORT: 5006
      SERVICE_NAME: category-service
      TICKET_SERVICE_URL: http://ticket:5002
      DB_URL: postgres://postgres:postgres@postgres:5432/category?schema=public
      RABBIT_MQ_URL: amqp://rabbitmq
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./services/category/src:/app/src
    networks:
      - app-network

  # openapi specification
  openapi:
    build:
      context: ./specification
      dockerfile: Dockerfile
    ports:
      - '5055:5055'
      - '5065:5065'
    volumes:
      - ./specification:/app
    networks:
      - app-network

  # rabbitmq service
  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - '15672:15672'
      - '5672:5672'
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network

  # mongo service
  redis:
    image: redis/redis-stack:latest
    ports:
      - '6379:6379'
      - '8001:8001'
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # postgres service
  postgres:
    image: postgres:16
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # pgadmin service
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: 'example@gmail.com'
      PGADMIN_DEFAULT_PASSWORD: 'example'
    networks:
      - app-network

  # mongo service
  mongo:
    image: mongo:latest
    ports:
      - '27020:27017'
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # mongo-express service
  mongo-express:
    image: mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_SERVER: 'mongo'
      ME_CONFIG_MONGODB_PORT: '27017'
      ME_CONFIG_BASICAUTH_USERNAME: 'root'
      ME_CONFIG_BASICAUTH_PASSWORD: 'root'
    networks:
      - app-network

  # mailhog service
  mailhog:
    image: mailhog/mailhog
    ports:
      - '8025:8025'
      - '1025:1025'
    volumes:
      - mailhog-data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq-data:
  redis-data:
  mailhog-data:
  mongo-data:
  postgres-data:
